/*
 * This C++ source file was generated by the Gradle 'init' task.
 */

#include "mfem-mesh-reader.h"
#include <cassert>
#include <iostream>
#include <string>
using namespace std;

// Taproot project directory
const char* PROJECT_ROOT_DIR = "../../../../";

// External data directory
const char* EXTERNAL_DATA_DIR = "../../../../../mesh";


void test_mfem_laghos_mesh_open() {
    string meshDir = string(PROJECT_ROOT_DIR) + "/data/1m_mesh";
    string meshFile = string(meshDir) + string("/1m_60_mesh"); 
    string eGFFile = string(meshDir) + string("/1m_60_e"); 
    string rhoGFFile = string(meshDir) + string("/1m_60_rho"); 
    string vGFFile = string(meshDir) + string("/1m_60_v"); 
    int mh = mfem_laghos_mesh_open(meshFile.c_str(), 
                                   eGFFile.c_str(), 
                                   rhoGFFile.c_str(), 
                                   vGFFile.c_str());
    assert(mh >= 0);
    int rc = mfem_laghos_mesh_close(mh);
    cerr << __func__ << " Complete" << endl;
}

void test_mfem_laghos_mesh_close() {
    string meshDir = string(PROJECT_ROOT_DIR) + "/data/1m_mesh";
    string meshFile = string(meshDir) + string("/1m_60_mesh"); 
    string eGFFile = string(meshDir) + string("/1m_60_e"); 
    string rhoGFFile = string(meshDir) + string("/1m_60_rho"); 
    string vGFFile = string(meshDir) + string("/1m_60_v"); 
    int mh = mfem_laghos_mesh_open(meshFile.c_str(), 
                                   eGFFile.c_str(), 
                                   rhoGFFile.c_str(), 
                                   vGFFile.c_str());
    assert(mh >= 0);
    int rc = mfem_laghos_mesh_close(mh);
    assert(rc == 0);
    cerr << __func__ << " Complete" << endl;
}

void test_mfem_laghos_mesh_read() {
    string meshDir = string(PROJECT_ROOT_DIR) + "/data/1m_mesh";
    string meshFile = string(meshDir) + string("/1m_60_mesh"); 
    string eGFFile = string(meshDir) + string("/1m_60_e"); 
    string rhoGFFile = string(meshDir) + string("/1m_60_rho"); 
    string vGFFile = string(meshDir) + string("/1m_60_v"); 
    int mh = mfem_laghos_mesh_open(meshFile.c_str(), 
                                   eGFFile.c_str(), 
                                   rhoGFFile.c_str(), 
                                   vGFFile.c_str());
    assert(mh >= 0);

    // Read the first 128 mesh elements into an array
    laghos_mesh_point_t points[65536] = {0};
    mfem_mesh_iterator_t iter = 0;
    int count = mfem_laghos_mesh_read(mh, &iter, points, 128);
    assert(128 == count);
    for (int i = 0; i < count; i++) {
        assert(0 != points[i].x);
        assert(0 != points[i].y);
        assert(0 != points[i].z);
        assert(0 != points[i].e);
        assert(0 != points[i].rho);
        assert(0 != points[i].v_x);
        assert(0 != points[i].v_y);
        assert(0 != points[i].v_z);
    }
    assert(16 == iter);

    // Read through the remaining points 65536 at a time
    while (!mfem_laghos_mesh_at_end(mh, &iter)) {
        count = mfem_laghos_mesh_read(mh, &iter, points, 2048);
    }
    assert(65536 == iter);

    int rc = mfem_laghos_mesh_close(mh);
    assert(rc == 0);
    cerr << __func__ << " Complete" << endl;
}

void test_mfem_laghos_mesh_at_end() {
    string meshDir = string(PROJECT_ROOT_DIR) + "/data/1m_mesh";
    string meshFile = string(meshDir) + string("/1m_60_mesh"); 
    string eGFFile = string(meshDir) + string("/1m_60_e"); 
    string rhoGFFile = string(meshDir) + string("/1m_60_rho"); 
    string vGFFile = string(meshDir) + string("/1m_60_v"); 
    int mh = mfem_laghos_mesh_open(meshFile.c_str(), 
                                   eGFFile.c_str(), 
                                   rhoGFFile.c_str(), 
                                   vGFFile.c_str());
    size_t ele_count = 65536;

    // Test at the beginning
    mfem_mesh_iterator_t begin = 0;
    assert(false == mfem_laghos_mesh_at_end(mh, &begin));

    // Test at the last valid index
    mfem_mesh_iterator_t last_valid = ele_count - 1;
    assert(false == mfem_laghos_mesh_at_end(mh, &last_valid));

    // Test beyond the index
    mfem_mesh_iterator_t end = ele_count;
    assert(true == mfem_laghos_mesh_at_end(mh, &end));

    int rc = mfem_laghos_mesh_close(mh);
    assert(rc == 0);
    cerr << __func__ << " Complete" << endl;
}

void test_mfem_laghos_mesh_get_num_elements() {
    string meshDir = string(PROJECT_ROOT_DIR) + "/data/1m_mesh";
    string meshFile = string(meshDir) + string("/1m_60_mesh"); 
    string eGFFile = string(meshDir) + string("/1m_60_e"); 
    string rhoGFFile = string(meshDir) + string("/1m_60_rho"); 
    string vGFFile = string(meshDir) + string("/1m_60_v"); 
    int mh = mfem_laghos_mesh_open(meshFile.c_str(), 
                                   eGFFile.c_str(), 
                                   rhoGFFile.c_str(), 
                                   vGFFile.c_str());
    size_t eles = mfem_laghos_mesh_get_num_elements(mh);
    assert(65536 == eles);
    cerr << __func__ << " Complete" << endl;
}

void test_mfem_laghos_mesh_get_num_points() {
    string meshDir = string(PROJECT_ROOT_DIR) + "/data/1m_mesh";
    string meshFile = string(meshDir) + string("/1m_60_mesh"); 
    string eGFFile = string(meshDir) + string("/1m_60_e"); 
    string rhoGFFile = string(meshDir) + string("/1m_60_rho"); 
    string vGFFile = string(meshDir) + string("/1m_60_v"); 
    int mh = mfem_laghos_mesh_open(meshFile.c_str(), 
                                   eGFFile.c_str(), 
                                   rhoGFFile.c_str(), 
                                   vGFFile.c_str());
    size_t pts = mfem_laghos_mesh_get_num_points(mh);
    assert(524288 == pts);
    cerr << __func__ << " Complete" << endl;
}

void test_mfem_laghos_mesh_read_30m() {
    string meshDir = string(EXTERNAL_DATA_DIR) + "/30m";
    string meshFile = string(meshDir) + string("/30m_60_mesh"); 
    string eGFFile = string(meshDir) + string("/30m_60_e"); 
    string rhoGFFile = string(meshDir) + string("/30m_60_rho"); 
    string vGFFile = string(meshDir) + string("/30m_60_v"); 
    int mh = mfem_laghos_mesh_open(meshFile.c_str(), 
                                   eGFFile.c_str(), 
                                   rhoGFFile.c_str(), 
                                   vGFFile.c_str());
    assert(mh >= 0);

    // Read through all of the points
    laghos_mesh_point_t points[65536] = {0};
    mfem_mesh_iterator_t iter = 0;
    int count = 0;
    while (!mfem_laghos_mesh_at_end(mh, &iter)) {
        count = mfem_laghos_mesh_read(mh, &iter, points, 2048);
    }
    assert(4194304 == iter);

    int rc = mfem_laghos_mesh_close(mh);
    assert(rc == 0);
    cerr << __func__ << " Complete" << endl;
}

int main() {
    test_mfem_laghos_mesh_open();
    test_mfem_laghos_mesh_close();
    test_mfem_laghos_mesh_read();
    test_mfem_laghos_mesh_at_end();
    test_mfem_laghos_mesh_get_num_elements();
    test_mfem_laghos_mesh_get_num_points();
    //test_mfem_laghos_mesh_read_30m();

    return 0;
}